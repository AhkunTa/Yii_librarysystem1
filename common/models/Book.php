<?php

namespace common\models;

use phpDocumentor\Reflection\DocBlock\Tag;
use Yii;
use yii\helpers\Html;

/**
 * This is the model class for table "library_book".
 *
 * @property integer $id
 * @property string $bookid
 * @property integer $bookstatus
 * @property string $bookname
 * @property integer $booktypeid
 * @property string $author
 * @property integer $bookoperid
 * @property integer $bookcount
 * @property string $booktag
 * @property string $bookintroduction
 * @property integer $bookreserves
 *
 * @property Type $booktype
 * @property Admin $bookoper
 * @property Borrow[] $libraryBorrows
 */
class Book extends \yii\db\ActiveRecord
{
    private $_oldTags;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'library_book';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['bookid', 'bookname', 'booktypeid', 'author', 'bookoperid'], 'required'],
            [['bookstatus', 'booktypeid', 'bookoperid', 'bookcount', 'bookreserves'], 'integer'],
            [['booktag'], 'string'],
            [['bookid', 'bookname', 'author'], 'string', 'max' => 100],
            [['bookintroduction'], 'string', 'max' => 200],
            [['booktypeid'], 'exist', 'skipOnError' => true, 'targetClass' => Type::className(), 'targetAttribute' => ['booktypeid' => 'typeid']],
            [['bookoperid'], 'exist', 'skipOnError' => true, 'targetClass' => Admin::className(), 'targetAttribute' => ['bookoperid' => 'adminid']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [

            'id' => '编号',
            'bookid' => '索书号',
            'bookstatus' => '借阅状态',
            'bookname' => '书名',
            'booktypeid' => '图书类型',
            'author' => '作者',
            'bookoperid' => '添加人',
            'bookcount' => '借阅次数',
            'booktag' => '标签',
            'bookintroduction' => '作品简介',
            'bookreserves' => '剩余册数',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBooktype()
    {
        return $this->hasOne(Type::className(), ['typeid' => 'booktypeid']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBookoper()
    {
        return $this->hasOne(Admin::className(), ['adminid' => 'bookoperid']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLibraryBorrows()
    {
        return $this->hasMany(Borrow::className(), ['bookid' => 'bookid']);
    }


    public function getAdminuser()
    {
        return $this->hasOne(Admin::className(), ['adminid' => 'bookoperid']);
    }

    public function getStatus()
    {
        return $this->hasOne(bookstatus::className(), ['id' => 'bookstatus']);
    }


    public function  afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        $this->_oldTags = $this->booktag;

    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        Tags::updateFrequency($this->_oldTags,$this->booktag);
    }

    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub

        Tags::updateFrequency($this->booktag,'');

    }

    public function approve(){
        if( $this ->bookstatus==3)
        {$this ->bookstatus = 1;} //设置评论已审核
        return ($this->save()?true:false);
    }

    public static function getShengheCount(){
        return Book::find()->where(['bookstatus'=>3])->count();
    }

    public function getUrl(){

        return Yii::$app->urlManager->createUrl(
//            ['book/detail','id'=>$this->id,'title'=>$this->bookname]
            ['book/detail','id'=>$this->id]
        );
    }

    //获取图书简介开头128个字符
    public function getBeginning($length =128){

        $tmpStr = strip_tags($this ->bookintroduction);
        $tmpLen = mb_strlen($tmpStr);

        $tmpStr = mb_substr($tmpStr,0,$length,'utf-8');
        return $tmpStr.($tmpLen>$length?'...':'');
    }

   //获取标签连接
    public function getTagLinks(){
        $links =array();
        foreach(Tags::string2array($this->booktag)as $tag){
            $links[]=Html::a(Html::encode($tag),array('book/index','BookSearch[booktag]'=>$tag));
        }
        return $links;
    }

        //获取借阅次数
    public function getBookCount(){
        return $this->bookcount;
    }


    //获取借阅次数最多的五本书
    public static function findHottestBorrow($limit =5){

        $hottest = Book::find()->orderBy('bookcount DESC')->limit($limit)->all();

        return $hottest;
    }
}
